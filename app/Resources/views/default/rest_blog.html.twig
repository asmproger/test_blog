{% extends 'base.html.twig' %}

{% block body %}
    <script>
        // init vars
        var current_page = 1,
            pages = 1,
            formWrapper, bList, bItem, paginationContainer, table;

        // update active element
        function updatePagination() {
            paginationContainer.find('li.active').removeClass('active');
            paginationContainer.find('a[data-page="' + current_page + '"]').closest('li').addClass('active');
        }

        // create paginator, with pages count from server
        function buildPagination() {
            if (pages <= 1) {
                return;
            }
            $('.pagination').find('li:not([class])').remove();
            $('.pagination').find('li.active').remove();
            var tmp = paginationContainer.find('.prev');
            for (var i = 1; i <= pages; i++) {
                var $item = $('<li></li>');
                var $span = $('<span></span>');
                var $a = $('<a>', {'data-page': i, 'href': 'javascript://', 'html': i});
                $span.append($a);
                $item.append($span);
                if (i === 1) {
                    $item.addClass('active');
                }
                tmp.after($item);
                tmp = $item;
            }
        }

        // retieve pages count from server
        // callback - any function you want
        function updatePagesCount(callback) {
            $.ajax({
                dataType: 'json',
                url: '{{ path("get_blogs_count") }}',
                success: function (response) {
                    pages = parseInt(response.count);
                    pages /= 10; // dirty hack


                    if (typeof callback === 'function') {
                        callback();
                    }
                }
            });
        }

        // load selected page from server with REST
        function loadPage(page, isHref) {
            // dirty hack, will be replaced with bundle

            var url = '{{ path("get_blog_all", {"page": "page_id", "ipp": 10 }) }}';
            url = url.replace("page_id", page);
            if (isHref) {
                url = page;
            }

            $.ajax({
                dataType: 'json',
                url: url,
                headers: {
                    //'Accept': 'text/html'
                    'Accept': 'application/json'
                },
                success: function (data, statusText, obj) {
                    buildContent(data);
                    // update active page on paginator
                    updatePagination();
                    showList();
                    
                }
            });
        }

        // create html for json data from api
        function buildContent(data) {
            current_page = data.current_page_number;
            var target = table.find('tbody');
            target.empty();
            for (var i in data.items) {
                var item = data.items[i];
                var tr = $('<tr data-id="'+item.id+'"></tr>');
                var td1 = $('<td><img style="display: none;" onload="$(this).show();" width="150" src="/uploads/images/' + item.pic + '" /></td>');
                var td2 = $('<td><a class="blog-title" href="javascript://">' + item.title + '</a></td>');
                var td3 = $('<td>' + ((item.short) ? item.short : '') + '</td>');
                var td4 = $('<td><a class="blog-edit-ajax" href="javascript://">edit</a> <a class="blog-delete-ajax" href="javascript://">delete</a></td>');
                tr.append(td1);
                tr.append(td2);
                tr.append(td3);
                tr.append(td4);

                target.append(tr);
            }

        }

        /// hide everything and show form only
        function showForm(isEdit) {
            bList.hide();
            bItem.hide();
            formWrapper.show();

            // change submit btn title if needed
            if (isEdit) {
                formWrapper.find('.btn-primary').html('Save');
            } else {
                clearForm();
                formWrapper.find('.btn-primary').html('Add');
            }
        }
        // clear form fields
        function clearForm() {
            formWrapper.find(':input').each(function(i, el) {
                $(el).val('');
            });
            $('#blog_post_image').attr('src', '');
        }

        // hide everything and show posts list
        function showList() {
            bList.show();
            bItem.hide();
            formWrapper.hide();
            isEdit = false;
        }

        $(document).ready(function () {
            postsWrapper = $('.blogs-list');
            paginationContainer = $('.paginator-wrapper .pagination');
            // wrapper for posts table
            bList = $('.blogs-list');
            //wrapper for blog item (when view)
            bItem = $('.blog-item');
            // wrapper for add/edit form
            formWrapper = $('.post-form');

            table = bList.find('table');

            // let's get pages count from server and build paginator
            updatePagesCount(function () {
                loadPage(1);
                buildPagination();
            });

            // jq fileuploader
            $('#blog_post_pic').fileupload({
                url: '{{ path('rest_blog_upload') }}',
                dataType: 'json',
                done: function (e, data) {
                    if (data.result.status) {
                        $('#blog_post_image').css('width', '150px');
                        $('#blog_post_image').attr('src', '/uploads/images/' + data.result.data.image);
                        $('#blog_post_image').show();

                        $('#blog_post__image_id').val(data.result.data.id);
                        $('#blog_post__image_token').val(data.result.data.token);
                    }
                    console.log(data);
                    $.each(data.result.files, function (index, file) {
                        $('<p/>').text(file.name).appendTo('#files');
                    });
                },
                progressall: function (e, data) {
                    var progress = parseInt(data.loaded / data.total * 100, 10);
                    $('#progress .progress-bar').css(
                        'width',
                        progress + '%'
                    );
                }
            })
        });

        var isEdit = false;

        // remove post from api
        $(document).on('click', '.blog-delete-ajax', function () {
            if (!confirm('Are you shure?')) {
                return;
            }
            isEdit = true;
            var self = $(this);
            var id = parseInt(self.closest('tr').data('id'));
            if (!id) {
                return;
            }
            // dirty hack, will be replaced with bundle
            var url = '{{ path("delete_blog", {"id": "id" }) }}';
            url = url.replace("id", id);
            $.ajax({
                url: url,
                type: 'delete',
                dataType: 'json',
                beforeSend: function () {
                    
                },
                success: function (response) {
                    updatePagesCount(function () {
                        loadPage(1);
                        buildPagination();
                    });
                }
            });
        });

        // edit label click handler
        $(document).on('click', '.blog-edit-ajax', function () {
            isEdit = true;
            var self = $(this);
            var id = parseInt(self.closest('tr').data('id'));
            if (!id) {
                return;
            }
            // dirty hack, will be replaced with bundle
            var url = '{{ path("get_blog", {"id": "id" }) }}';
            url = url.replace("id", id);
            $.ajax({
                url: url,
                type: 'get',
                dataType: 'json',
                success: function (response) {
                    showEditForm(response);
                }
            });
        });

        // show form for editing
        function showEditForm(data) {
            showForm(1);
            fillForm(data);
        }

        // fill form with data from api
        function fillForm(data) {
            let keys = Object.getOwnPropertyNames(data);
            for (let i in keys) {
                let key = keys[i],
                    value = data[key],
                    el = formWrapper.find('#blog_post_' + key);

                if (el.length && 'pic' !== key && 'enabled' !== key) {
                    el.val(value);
                }

                if ('pic' === key && value) {
                    $('#blog_post_image').attr('src', '/uploads/images/' + value);
                    $('#blog_post_image').show();
                }

                if ('enabled' === key) {
                    el.prop('checked', value);
                }
            }
        }

        //form submit, collect data from html and ajax to post action
        $(document).on('click', '#blog_post_submit', function (e) {
            let $form = $(this).closest('form'),
                data = $form.serialize(),
                controls = $form.find(':input'),
                url = '{{ path("api_post_action") }}',
                type = isEdit ? 'PUT' : 'POST',
                obj = {}
            ;

            $form.attr('method', type);

            //collect form data for api (no form serialization, just object with key-value pairs)
            $.each(controls, function (k, v) {
                let el = $(v), name = el.attr('name').replace('blog_post[', '');
                name = name.replace(']', '');

                // we need name-value pairs for our api
                if(name === 'submit') {
                    obj[name] = true;
                } else {
                    if(name === 'enabled') {
                        obj[name] = +el.prop('checked');
                    } else {
                        obj[name] = el.val();
                    }
                }
            });

            $.ajax({
                url: url,
                data: obj,
                type: type,
                dataType: 'json',
                beforeSend: function () {
                    
                },
                success: function (response, textStatus, xhr) {
                    if (response.status) {
                        // we have added item, let's check pages count and update list
                        updatePagesCount(function () {
                            loadPage(1);
                            buildPagination();
                        });
                    } else {
                        //some problems
                        alert('err');
                    }
                    
                },
                fail: function (resposne) {
                    
                }
            });
            return false;
        });

        // for paginator links
        $(document).on('click', '.pagination a', function (e) {
            let self = $(this),
                page = 1,
                _class = self.closest('li').attr('class');
            switch (_class) {
                case 'first':
                    page = 1;
                    break;
                case 'prev':
                    page = (current_page > 0) ? --current_page : 1;
                    break;
                case 'next':
                    page = (current_page < pages) ? ++current_page : pages;
                    break;
                case 'last':
                    page = pages;
                    break;
                default:
                    page = parseInt(self.data('page'));
            }
            loadPage(page);
            return false;
        });

        // back to posts list from viewving single post
        $(document).on('click', '.back-to-list', function () {
            bList.show();
            bItem.hide();
            bItem.html('');
        });

        // lets view single item
        $(document).on('click', '.blog-title', function () {
            let self = $(this), id = self.closest('tr').data('id');
            // dirty hack, will be replaced with bundle
            let url = '{{ path("get_blog", {"id": "id" }) }}';
            url = url.replace("id", id);
            $.ajax({
                url: url,
                type: 'get',
                data: {},
                headers: {
                    'Accept': '*/*' // api return html fo us in this case. no reason, just example of html response from rest
                },
                success: function (html, statusText, obj) {
                    bItem.html(html);
                    bList.hide();
                    bItem.show();
                    
                }
            });
        });

        // show loader before send ajax
        $(document).ajaxSend(function() {
            $('.some-wrapper').css('opacity', 0.5);
        });
        // hide laoder after ajax
        $(document).ajaxComplete(function() {
            $('.some-wrapper').css('opacity', 1);
        });
    </script>
    <div id="wrapper">
        <div id="container">
            {{ knp_menu_render('AppBundle:Builder:mainMenu') }}
            <div class="text-right">
                <a class="btn btn-primary" onclick="showForm();" href="javascript://">Add</a>
            </div>
            <div id="welcome">
                <h1><span>REST AJAX BLOG</span></h1>
            </div>

            <div class="some-wrapper">
                <div class="blogs-list">

                    <table class="table">
                        <thead>
                        <tr>
                            <th></th>
                            <th>Title</th>
                            <th>Short</th>
                            <th></th>
                        </tr>
                        </thead>
                        <tbody id="table_content">
                        {# fot ajax content #}
                        </tbody>
                    </table>
                    {% include 'partials/rest_blog_pagination.html.twig' %}
                </div>

                <div class="blog-item" style="display: none;"></div>

                <div class="post-form" style="display: none">
                    <a href="javascript://" onclick="showList()">Back to list</a>
                    {{ form_start(form, {'attr' : {'class': 'blogpost-form'}}) }}
                    <div class="form-group">
                        {{ form_label(form.title) }}
                        {{ form_widget(form.title, {'attr' : {'class': 'form-control'}}) }}
                        <p class="help-block">{{ form_errors(form.title) }}</p>
                    </div>
                    <div class="form-group">
                        {{ form_label(form.href) }}
                        {{ form_widget(form.href, {'attr' : {'class': 'form-control'}}) }}
                        <p class="help-block">{{ form_errors(form.href) }}</p>
                    </div>

                    <div class="form-group">
                        {{ form_label(form.short) }}
                        {{ form_widget(form.short, {'attr' : {'class': 'form-control'}}) }}
                        <p class="help-block">{{ form_errors(form.short) }}</p>
                    </div>
                    <div class="form-group">
                        {{ form_label(form.body) }}
                        {{ form_widget(form.body, {'attr' : {'class': 'form-control'}}) }}
                        <p class="help-block">{{ form_errors(form.body) }}</p>
                    </div>
                    <div class="form-group">
                        {{ form_widget(form.pic, {'attr' : {'class': 'form-control'}}) }}
                        <p class="help-block">{{ form_errors(form.pic) }}</p>
                        <img id="blog_post_image" style="display: none;" onload="$(this).show();"
                             class="product-image-preview"
                             width="150"
                             src="{{ asset('/uploads/images/') ~ form.vars.value.pic }}"/>
                    </div>

                    <div class="form-group">
                        {{ form_label(form.created_date) }}
                        {{ form_widget(form.created_date, {'attr' : {'class': ''}}) }}
                        <p class="help-block">{{ form_errors(form.created_date) }}</p>
                    </div>
                    <div class="form-group">
                        {{ form_label(form.enabled) }}
                        {{ form_widget(form.enabled, {'attr' : {'class': ''}}) }}
                        <p class="help-block">{{ form_errors(form.enabled) }}</p>
                    </div>

                    <div class="form-group text-right">
                        {{ form_widget(form.submit, {'attr' : {'class': 'btn btn-primary'}}) }} or <a href=""
                                                                                                      onclick="history.back(); return false;">cancel</a>
                    </div>
                    {{ form_end(form) }}
                </div>
            </div>

        </div>
    </div>
{% endblock %}
{% block stylesheets %}
    <style>
        #blog_post_pic {
            padding: 0;
            border: none;
        }
        #rest-container {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid gray;

        }
    </style>
{% endblock %}